
/**
Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

Question link: https://leetcode.com/problems/binary-tree-level-order-traversal/description/?envType=study-plan&id=level-1
**/

/**
* Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*>q;
        vector<vector<int>>v;
        if(root==NULL)
        {
            return v;
        }
        q.push(root);
        while(!q.empty()){
            int size=q.size();
            vector<int>a;
            for(int i=0;i<size;i++){
            TreeNode *p=q.front();
            q.pop();
            a.push_back(p->val);
            if(p->left!=NULL)q.push(p->left);
            if(p->right!=NULL)q.push(p->right);
            }

            v.push_back(a);
            
        }
        return v;
        
    }
};
